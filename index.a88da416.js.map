{"mappings":"AAAA,MAAM;IACF,YAAY,EAAE,WAAW,EAAE,CAAE;QACzB,IAAI,CAAC,QAAQ,EAAE;QAEf,IAAI,CAAC,cAAc;IACvB;IAEA,YAAY,CAAC;QACT,IAAK,IAAI,IAAI,GAAG,IAAI,MAAM,QAAQ,IAAK;YACnC,MAAM,OAAO,KAAK,CAAC,EAAE;YACrB,IAAI,CAAC,MAAM,KAAK;gBACZ,IAAI,KAAK;gBACT,OAAO,KAAK;gBACZ,MAAM,KAAK;gBACX,MAAM,KAAK;YACf;QACJ;QACA,8CAA8C;QAC9C,IAAI,CAAC,YAAY,IAAI,CAAC;IAC1B,EAAC;IAED,UAAU,CAAC;QACP,OAAO;YACH,wHAAwH;YACxH,sHAAsH;YACtH,IAAI,OAAO,OAAO;YAClB,OAAO,KAAK;YACZ,MAAM;YACN,MAAM;QACV;QACA,IAAI,CAAC,MAAM,KAAK;YACZ,IAAI,KAAK;YACT,OAAO;YACP,MAAM,KAAK;YACX,MAAM,KAAK;QACf;QAEA,8CAA8C;QAC9C,IAAI,CAAC,YAAY,IAAI,CAAC;QACtB,OAAO;IACX,EAAC;IAGD,sBAAsB,CAAC;QACnB,gDAAgD;QAChD,MAAM,QAAQ,IAAI,CAAC,MAAM,UAAU,CAAC,OAAS,KAAK,MAAM;QACxD,IAAI,CAAC,MAAM,OAAO,OAAO;QAEzB,8CAA8C;QAC9C,IAAI,CAAC,YAAY,IAAI,CAAC;IAC1B,EAAC;IAED,kBAAkB,CAAC;QACf,iCAAiC;QACjC,MAAM,QAAQ,IAAI,CAAC,MAAM,UAAU,CAAC,OAAS,KAAK,MAAM;QACxD,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM;QAC7B,MAAM,UAAU,IAAI,CAAC,kBAAkB,IAAI,CAAC,OAAO;QACnD,IAAI,CAAC,YAAY,IAAI,CAAC;QACtB,OAAO;IACX,EAAC;IAED,+BAA+B;IAC/B,oBAAoB,CAAC,OAAO;QACxB,OAAQ,KAAK,CAAC,MAAM,CAAC;YACjB,KAAK;gBACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;gBACzB,OAAO;YACX,KAAK;gBACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;gBACzB,OAAO;QACf;IACJ,EAAC;AACL","sources":["src/model.js"],"sourcesContent":["class Model {\r\n    constructor({ renderFilms }) {\r\n        this.films = [];\r\n\r\n        this.renderFilms = renderFilms;\r\n    }\r\n\r\n    initFilms = (array) => {\r\n        for (let i = 0; i < array.length; i++) {\r\n            const elem = array[i];\r\n            this.films.push({\r\n                id: elem.id,\r\n                order: elem.order,\r\n                done: elem.done,\r\n                film: elem.film\r\n            });\r\n        };\r\n        // передаёт массив фильмов в view и render его\r\n        this.renderFilms(this.films)\r\n    }\r\n\r\n    addFilm = (film) => {\r\n        film = {\r\n            // window.crypto.randomUUID() это относительно новый и надежный способ создания UUID с помощью собственного Javascript. \r\n            // Он поддерживается во всех современных, вечнозеленых браузерах и может генерировать UUID с помощью одной строки кода\r\n            id: window.crypto.randomUUID(),\r\n            order: Date.now(),\r\n            done: false,\r\n            film: film\r\n        }\r\n        this.films.push({\r\n            id: film.id,\r\n            order: null,\r\n            done: film.done,\r\n            film: film.film\r\n        })\r\n\r\n        // передаёт массив фильмов в view и render его\r\n        this.renderFilms(this.films)\r\n        return film;\r\n    }\r\n\r\n\r\n    deleteFilmFromArray = (id) => {\r\n        // ищем индекс элемента в массиве и вырезаем его\r\n        const index = this.films.findIndex((elem) => elem.id == id);\r\n        this.films.splice(index, 1);\r\n\r\n        // передаёт массив фильмов в view и render его\r\n        this.renderFilms(this.films);\r\n    }\r\n\r\n    doneFilmInArray = (id) => {\r\n        // ищем индекс элемента в массиве\r\n        const index = this.films.findIndex((elem) => elem.id == id);\r\n        console.log(this.films[index])\r\n        const boolean = this._toggleStatusDone(this.films, index)\r\n        this.renderFilms(this.films);\r\n        return boolean\r\n    }\r\n\r\n    // функция смены статуса фильма\r\n    _toggleStatusDone = (films, index) => {\r\n        switch (films[index].done) {\r\n            case true:\r\n                this.films[index].done = false;\r\n                return false\r\n            case false:\r\n                this.films[index].done = true;\r\n                return true\r\n        }\r\n    }\r\n}"],"names":[],"version":3,"file":"index.a88da416.js.map","sourceRoot":"/__parcel_source_root/"}